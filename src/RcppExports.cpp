// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// bigram
List bigram(std::vector< std::string > strings);
RcppExport SEXP _strmatch_bigram(SEXP stringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type strings(stringsSEXP);
    rcpp_result_gen = Rcpp::wrap(bigram(strings));
    return rcpp_result_gen;
END_RCPP
}
// jaro_distance
double jaro_distance(const std::string s1, const std::string s2);
RcppExport SEXP _strmatch_jaro_distance(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< const std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(jaro_distance(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// most_similar_jaro
List most_similar_jaro(std::vector< std::string > strings, std::vector< std::string > targets);
RcppExport SEXP _strmatch_most_similar_jaro(SEXP stringsSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(most_similar_jaro(strings, targets));
    return rcpp_result_gen;
END_RCPP
}
// jaro_winkler_distance
double jaro_winkler_distance(std::string str1, std::string str2);
RcppExport SEXP _strmatch_jaro_winkler_distance(SEXP str1SEXP, SEXP str2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str1(str1SEXP);
    Rcpp::traits::input_parameter< std::string >::type str2(str2SEXP);
    rcpp_result_gen = Rcpp::wrap(jaro_winkler_distance(str1, str2));
    return rcpp_result_gen;
END_RCPP
}
// most_similar_jw
List most_similar_jw(std::vector< std::string > strings, std::vector< std::string > targets);
RcppExport SEXP _strmatch_most_similar_jw(SEXP stringsSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(most_similar_jw(strings, targets));
    return rcpp_result_gen;
END_RCPP
}
// levenstein_distance
unsigned int levenstein_distance(const std::string& s1, const std::string& s2);
RcppExport SEXP _strmatch_levenstein_distance(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(levenstein_distance(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// levenstein_ratio
double levenstein_ratio(std::string s1, std::string s2);
RcppExport SEXP _strmatch_levenstein_ratio(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< std::string >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(levenstein_ratio(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// most_similar_levenstein
List most_similar_levenstein(std::vector< std::string > strings, std::vector< std::string > targets);
RcppExport SEXP _strmatch_most_similar_levenstein(SEXP stringsSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type strings(stringsSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(most_similar_levenstein(strings, targets));
    return rcpp_result_gen;
END_RCPP
}
// to_uppercase
std::string to_uppercase(std::string str);
RcppExport SEXP _strmatch_to_uppercase(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(to_uppercase(str));
    return rcpp_result_gen;
END_RCPP
}
// to_lowercase
std::string to_lowercase(std::string str);
RcppExport SEXP _strmatch_to_lowercase(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(to_lowercase(str));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_strmatch_bigram", (DL_FUNC) &_strmatch_bigram, 1},
    {"_strmatch_jaro_distance", (DL_FUNC) &_strmatch_jaro_distance, 2},
    {"_strmatch_most_similar_jaro", (DL_FUNC) &_strmatch_most_similar_jaro, 2},
    {"_strmatch_jaro_winkler_distance", (DL_FUNC) &_strmatch_jaro_winkler_distance, 2},
    {"_strmatch_most_similar_jw", (DL_FUNC) &_strmatch_most_similar_jw, 2},
    {"_strmatch_levenstein_distance", (DL_FUNC) &_strmatch_levenstein_distance, 2},
    {"_strmatch_levenstein_ratio", (DL_FUNC) &_strmatch_levenstein_ratio, 2},
    {"_strmatch_most_similar_levenstein", (DL_FUNC) &_strmatch_most_similar_levenstein, 2},
    {"_strmatch_to_uppercase", (DL_FUNC) &_strmatch_to_uppercase, 1},
    {"_strmatch_to_lowercase", (DL_FUNC) &_strmatch_to_lowercase, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_strmatch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
